#+TITLE: Emacs Org Init File
#+AUTHOR: Jason Vander Woude

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="init.css" />


* Path Setup 

** Lisp
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/")
#+END_SRC

** Themes
Add all subdirectories of ~/.emacs.d/themes/ to the custom-theme-load-path
#+BEGIN_SRC emacs-lisp
  (let ((basedir "~/.emacs.d/themes/"))
        (dolist (f (directory-files basedir))
          (if (and (not (or (equal f ".") (equal f "..")))
                   (file-directory-p (concat basedir f)))
              (add-to-list 'custom-theme-load-path (concat basedir f)))))
#+END_SRC

* My Functions

** Return Key Functionality
Define some functions to allow for using the return key in a non-tratitional way
#+BEGIN_SRC emacs-lisp
  (defun my:return ()
    "Call the default bound to RET function. This is intended to be
    used only within the my-keys-minor-mode, othewise this is a
    useless function."
    (interactive)
    (my-keys-minor-mode 0)
    ;; interactively call the function bound to the return key
    (call-interactively (key-binding (kbd "RET") t))
    (my-keys-minor-mode 1))

  (defun my:drop-to-new-line ()
    "Move to end of line then call default bound RET function"
    (interactive)
    (move-end-of-line 1)
    (my:return))

  ;; This doesn't work on the first line of a file
  (defun my:rise-to-new-line ()
    "Move to end of previous line then call default bount RET
    function"
    (interactive)
    (previous-line 1)
    (my:drop-to-new-line))
#+END_SRC

** Save Macros as Functions
#+BEGIN_SRC emacs-lisp
(defun save-macro (name)
  "save a macro. Take a name as argument
   and save the last defined macro under
   this name at the end of your .emacs"
   (interactive "SName of the macro: ")  ; ask for the name of the macro
   (kmacro-name-last-macro name)         ; use this name for the macro
   (find-file user-init-file)            ; open ~/.emacs or other user init file
   (goto-char (point-max))               ; go to the end of the .emacs
   (newline)                             ; insert a newline
   (insert-kbd-macro name)               ; copy the macro
   (newline)                             ; insert a newline
   (switch-to-buffer nil))               ; return to the initial buffer

#+END_SRC

** Transparency
#+BEGIN_SRC emacs-lisp
  (defun transparency (value)
    "Sets the transparency of the frame window. 0=transparent/100=opaque"
    (interactive "nTransparency Value 0 - 100 opaque: ")
    (set-frame-parameter (selected-frame) 'alpha value))
#+END_SRC

** Quoting
#+BEGIN_SRC emacs-lisp
  (defun my-quote-it ()
    "Quote the current string"
    (interactive)
    (forward-char)
    (backward-sexp)
    (insert "\"")
    (forward-sexp)
    (insert "\""))
#+END_SRC

** Padding
#+BEGIN_SRC emacs-lisp
  (defun my-pad (&optional n)
    (interactive "P")
    (setq i 0)
    (unless n (setq n 4))
    (setq max (current-column))
    (while (< i (- n max))
      (insert " ")
      (setq i (1+ i))))
#+END_SRC

** My Keys Minor Mode
#+BEGIN_SRC emacs-lisp
  (defvar my-keys-minor-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "RET") 'my:return)                  ;; redundant
      (define-key map (kbd "C-;") 'my:drop-to-new-line)
      (define-key map (kbd "<S-return>") 'my:rise-to-new-line)
      (define-key map (kbd "C-c C-q") 'my-quote-it)
      map)
    "my-keys-minor-mode keymap.")

  (define-minor-mode my-keys-minor-mode
    "A minor mode so that my key settings override annoying major modes."
    :init-value t
    :lighter " my-keys")

  (defun my-minibuffer-setup-hook ()
    (my-keys-minor-mode 0))

  (add-hook 'minibuffer-setup-hook 'my-minibuffer-setup-hook)

  (my-keys-minor-mode 1)
#+END_SRC

** Horizontal Centering
#+BEGIN_SRC emacs-lisp
  (defun my-horizontal-recenter ()
    "make the point horizontally centered in the window"
    (interactive)
    (let ((mid (/ (window-width) 2))
          (line-len (save-excursion (end-of-line) (current-column)))
          (cur (current-column)))
      (if (< mid cur)
          (set-window-hscroll (selected-window)
                              (- cur mid)))))
#+END_SRC

* General Settings
#+BEGIN_SRC emacs-lisp
  (load-theme `wombat)
  ;;(menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq frame-title-format "Emacs")
  (setq inhibit-splash-screen t)
  (transparency 85)
#+END_SRC
  
* Preinstalled

** Org Mode

*** Add Templates
Add an elisp template bound to /<m + TAB/
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("m" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "<src lang=\"?\">\n\n</src>"))
#+END_SRC

*** Add Drawers
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-drawers "FUTURE")
  (add-to-list 'org-drawers "META")
#+END_SRC

*** Set Babel Languages
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
#+END_SRC

*** Cosmetics
#+BEGIN_SRC emacs-lisp
  (setq org-hide-leading-stars nil)
  (setq org-list-allow-alphabetical t)
  (setq org-src-fontify-natively t)  ;; you want this to activate coloring in blocks
  (setq org-src-tab-acts-natively t) ;; you want this to have completion in blocks
  (setq org-hide-emphasis-markers t) ;; to hide the *,=, or / markers
  (setq org-pretty-entities t)       ;; to have \alpha, \to and others display as utf8 http://orgmode.org/manual/Special-symbols.html
#+END_SRC

*** Theming
This has to be before requiring Org
This source is influence by [[http://orgmode.org/worg/org-contrib/babel/examples/fontify-src-code-blocks.html][this orgmode.org post]] and this [[https://emacs.stackexchange.com/questions/14824/org-block-background-font-not-having-effect/14886][StackExchange post]]
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'org-block-begin-line nil :background "#555" :foreground "#000" :underline "000")
(set-face-attribute 'org-block-end-line nil :background "#555" :foreground "#000" :overline "000")
(set-face-attribute 'org-block-background nil :background "#666")

;; (defface org-block-begin-line
;;   '((t (:underline "#FFF" :foreground "#999" :background "#050505")))
;;   "Face used for the line delimiting the begin of source blocks.")
;; (defface org-block-background
;;   '((t (:background "#AAA")))
;;   "Face used for the source block background.")
;; (defface org-block-end-line
;;   '((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
;;   "Face used for the line delimiting the end of source blocks.")

;;   (require 'color)
;; 
;;   (set-face-attribute 'org-block nil :background
;;                       (color-darken-name
;;                        (face-attribute 'default :background) 3))
;; 
;;   (setq org-src-block-faces '(("emacs-lisp" (:background "#EEE2FF"))
;;                               ("python" (:background "#E5FFB8"))))

;;   (org-block-begin-line
;;     ((t (:underline "#F00" :foreground "#0F0" :background "#00F"))))
;;   (org-block-background
;;     ((t (:background "#F0F"))))
;;   (org-block-end-line
;;     ((t (:underline "#0F0" :foreground "#00F" :background "#F00"))))
#+END_SRC

** Highlight Line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
  (set-face-underline 'hl-line nil)
#+END_SRC

** Ido
Ido mode improves the minibuffer when file searching
#+BEGIN_SRC emacs-lisp
  (ido-mode)
#+END_SRC

** Line Numbers
#+BEGIN_SRC emacs-lisp
  (global-linum-mode 1)
#+END_SRC

** Column Numbers
#+BEGIN_SRC emacs-lisp
  (column-number-mode)
#+END_SRC

** Parenthesis Matching
#+BEGIN_SRC emacs-lisp
  (require 'paren)
  (show-paren-mode 1)
  (set-face-background 'show-paren-match (face-background 'default))
  (set-face-inverse-video 'show-paren-match t)
#+END_SRC
   
* Installs

** Package Setup
Add Repositories
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (package-initialize)
#+END_SRC

** Melpa

*** Multiple Cursors
#+BEGIN_SRC emacs-lisp
  (require 'multiple-cursors)
#+END_SRC

*** Magit
#+BEGIN_SRC emacs-lisp
  (require 'magit)
#+END_SRC

*** Auto Complete
#+BEGIN_SRC emacs-lisp
  (require 'auto-complete)
  (require 'auto-complete-config)
  (ac-config-default)
#+END_SRC

*** Ess
#+BEGIN_SRC emacs-lisp
  (require 'ess-site)
  ;; Turn on auto-fill-mode with fill-column of 80 whenever ess-mode begins
  ;; This is in accordance with the Google R style guide
  (add-hook 'ess-mode-hook (progn
                             (auto-fill-mode)
                             (setq fill-column 80)) t)
#+END_SRC

*** Tramp
#+BEGIN_SRC emacs-lisp
  (require 'tramp)
  (setq tramp-default-method "ssh")
#+END_SRC

*** Evil Numbers
#+BEGIN_SRC emacs-lisp
  (require 'evil-numbers)
#+END_SRC

*** CSV
#+BEGIN_SRC emacs-lisp
  (require 'csv-mode)
#+END_SRC

*** Icicles
#+BEGIN_SRC emacs-lisp
  (require 'icicles)
  (icy-mode 0)
#+END_SRC

*** YASnippet
#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (yas-global-mode 1)
#+END_SRC

*** Origami
#+BEGIN_SRC emacs-lisp
(require 'origami)
(add-to-list 'origami-parser-alist '(ess-mode . origami-c-style-parser))
(define-key origami-mode-map (kbd "C-c j") 'origami-forward-toggle-node)
(global-origami-mode 1)
#+END_SRC

** Manual

*** M2
#+BEGIN_SRC emacs-lisp
  (load "~/.emacs-Macaulay2" t)
  (global-set-key (kbd "C-c C-l") 'M2-send-to-program)
#+END_SRC

*** Window Number
#+BEGIN_SRC emacs-lisp
  (autoload 'window-number-mode
    "window-number.el"
    "A global minor mode that enables selection of windows
    according to numbers with the C-x C-j prefix.  Another mode,
    `window-number-meta-mode' enables the use of the M- prefix."
    t)

  (window-number-mode)
#+END_SRC

*** Ace Jump
#+BEGIN_SRC emacs-lisp
  (autoload
    'ace-jump-mode
    "ace-jump-mode"
    "Emacs quick move minor mode"
    t)
#+END_SRC

* Global Key Bindings

** Window Movement
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x <up>") 'windmove-up)
  (global-set-key (kbd "C-x <down>") 'windmove-down)
  (global-set-key (kbd "C-x <right>") 'windmove-right)
  (global-set-key (kbd "C-x <left>") 'windmove-left)
#+END_SRC
** Mutliple Cursors
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

** Ace Jump
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-c C-SPC") 'ace-jump-mode)
  (define-key global-map (kbd "M-s M-j") 'ace-jump-mode)
  (define-key global-map (kbd "M-s M-d") 'ace-jump-mode)
  (define-key global-map (kbd "C-S-c C-SPC") 'ace-jump-line-mode)
#+END_SRC

** Move Backward Key Swap
#+BEGIN_SRC emacs-lisp
  ;; Swap M-b with M-j and C-b with C-j to give a more convenient
  ;; forward backward movement I'm not sure this is the best route since
  ;; there are times that I would like to use C-j as intended e.g. in
  ;; helm mode C-j is used to expand the current selection and now I'm
  ;; forced to use C-b to do so But I don't think I can just use
  ;; global-set-key to change the behavior the functions called are
  ;; context dependent

  ;; (define-key key-translation-map (kbd "C-b") (kbd "C-j"))
  ;; (define-key key-translation-map (kbd "C-j") (kbd "C-b"))

  ;; (define-key key-translation-map (kbd "M-b") (kbd "M-j"))
  ;; (define-key key-translation-map (kbd "M-j") (kbd "M-b"))
#+END_SRC

** Evil Numbers
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c +") 'evil-numbers/inc-at-pt)
  (global-set-key (kbd "C-c -") 'evil-numbers/dec-at-pt)
  (global-set-key (kbd "<kp-add>") 'evil-numbers/inc-at-pt)
  (global-set-key (kbd "<kp-subtract>") 'evil-numbers/dec-at-pt)
#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'helm-buffers-list)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
#+END_SRC

** Register Jump
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-z") 'jump-to-register)
#+END_SRC

** Origami
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "<S-iso-lefttab>") 'origami-forward-toggle-node)
#+END_SRC

** Horizontal Centering
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-S-l") 'my-horizontal-recenter)
#+END_SRC

* Final Calls
Starting a server allows using the emacsclient so that session info to be shared across frames
#+BEGIN_SRC emacs-lisp
  (if (and (fboundp 'server-running-p) 
           (not (server-running-p)))
      (server-start))
#+END_SRC

* Not Executed

** Code Completion
This segment inspired by this [[https://www.youtube.com/watch?v%3DHTUE03LnaXA][YouTube video]]
#+BEGIN_QUOTE
;; this function doesn't seem to be working yet
(defun my:ac-c-header-init()
  ;; Run command 'gcc -xc++ -E -v -' to find location of c++ header files on system
  (require 'auto-complete-c-headers)
  (add-to-list 'ac-sources 'ac-source-c-headers)
  (setq achead:include-directories
   (append '("/usr/include/c++/5"
             "/usr/include/x86_64-linux-gnu/c++/5"
             "/usr/include/c++/5/backward"
             "/usr/lib/gcc/x86_64-linux-gnu/5/include"
             "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed"
             "/usr/include/x86_64-linux-gnu")
             achead:include-directories)))
(add-hook 'c++-mode-hook 'my:ac-c-header-init)
(add-hook 'c-mode-hook 'my:ac-c-header-init)
;; flymake-google-cpplint comes from melpa
(defun my:flymake-google-init()
  (require 'flymake-gogle-cpplint)
  ;; in order to use this run from shell 'pip install cpplint'
  (custom-set-variables
   '(flycheck-c/c++-googlelint-executable "/usr/local/bin/cpplint.py"))
;;  (custon-set-variables
;;   '(flymake-gogle-cpplint-command "./.local/lib/python2.7/site-packages/cpplint.pyc"))
  (flymake-google-cpplint-load))
(add-hook 'c++-mode-hook 'my:flymake-google-init)
(add-hook 'c-mode-hook 'my:flymake-google-init)
;; NOTE: header files and cpplint don't seem to be working
#+END_QUOTE
** Tips
- M-h (org-mark-element)
- M-= (count-words-region START END &optional ARG)
